name: Procesar Aplicaci√≥n Laboral

on:
  push:
    paths:
      - 'to_process/*.yaml'

jobs:
  procesar-cv:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch full history for reliable git diff

      - name: Instalar dependencias
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml requests pandas

      - name: Instalar pandoc y LaTeX
        run: |
          sudo apt-get update
          sudo apt-get install -y pandoc
          sudo apt-get install -y texlive-latex-recommended texlive-xetex texlive-fonts-recommended texlive-latex-extra

      - name: Ejecutar procesamiento solo para los YAMLs modificados y capturar carpetas procesadas
        id: procesar
        run: |
          echo "============================================================"
          echo "DETECCI√ìN DE ARCHIVOS YAML MODIFICADOS"
          echo "============================================================"
          
          mkdir -p processed_folders
          
          # Debug: Show git state and relevant info
          echo "üìã Informaci√≥n del contexto de GitHub Actions:"
          echo "   Event: ${{ github.event_name }}"
          echo "   Before SHA: ${{ github.event.before }}"
          echo "   Current SHA: ${{ github.sha }}"
          echo "   Ref: ${{ github.ref }}"
          echo ""
          
          echo "üìã Estado actual del repositorio:"
          git --no-pager log --oneline -3
          echo ""
          
          echo "üìã Archivos YAML existentes en to_process/:"
          ls -la to_process/*.yaml 2>/dev/null || echo "   No se encontraron archivos YAML"
          echo ""
          
          # Determine changed files with better error handling
          CHANGED=""
          BEFORE_SHA="${{ github.event.before }}"
          CURRENT_SHA="${{ github.sha }}"
          
          # Check if this is a valid commit range (not initial commit or force push)
          if [ -z "$BEFORE_SHA" ] || [ "$BEFORE_SHA" = "0000000000000000000000000000000000000000" ]; then
            echo "‚ö†Ô∏è  Situaci√≥n especial detectada: primer commit o SHA anterior no disponible"
            echo "   Procesando TODOS los archivos YAML en to_process/ como fallback"
            CHANGED=$(find to_process -name "*.yaml" -type f 2>/dev/null | sed 's|^\./||' || true)
          else
            echo "üîç Detectando cambios usando git diff..."
            echo "   Comando: git diff --name-only $BEFORE_SHA $CURRENT_SHA"
            
            # Try to get the diff, with fallback if it fails
            if CHANGED=$(git diff --name-only "$BEFORE_SHA" "$CURRENT_SHA" 2>/dev/null | grep '^to_process/.*\.yaml$' || true); then
              echo "   ‚úì Git diff ejecutado exitosamente"
            else
              echo "   ‚ö†Ô∏è  Git diff fall√≥, usando fallback: procesando todos los YAML"
              CHANGED=$(find to_process -name "*.yaml" -type f 2>/dev/null | sed 's|^\./||' || true)
            fi
          fi
          
          echo ""
          echo "============================================================"
          
          # Check if any files were detected
          if [ -z "$CHANGED" ]; then
            echo "‚ÑπÔ∏è  No hay archivos YAML para procesar en este push."
            echo ""
            echo "üìã Resumen de la detecci√≥n:"
            echo "   - M√©todo usado: git diff entre $BEFORE_SHA y $CURRENT_SHA"
            echo "   - Archivos encontrados: 0"
            echo "   - Acci√≥n: Salir sin procesar (esto es esperado si no hubo cambios)"
            echo "============================================================"
            exit 0
          fi
          
          # Display detected files
          FILE_COUNT=$(echo "$CHANGED" | wc -l)
          echo "‚úÖ Archivos YAML detectados para procesar: $FILE_COUNT"
          echo "============================================================"
          echo "$CHANGED"
          echo "============================================================"
          echo ""
          
          # Process each detected file
          echo "üîÑ Iniciando procesamiento de archivos..."
          echo ""
          
          PROCESSED_COUNT=0
          FAILED_COUNT=0
          
          for file in $CHANGED; do
            echo "-----------------------------------------------------------"
            echo "üìÑ Procesando: $file"
            
            if [ -f "$file" ]; then
              echo "   ‚úì Archivo existe en el workspace"
              
              if FOLDER_NAME=$(python aplicaciones_laborales/scripts/procesar_aplicacion.py "$file" 2>&1 | tee /tmp/process_output.log | tail -n 1); then
                echo "   ‚úì Procesamiento exitoso"
                echo "   üìÅ Carpeta generada: $FOLDER_NAME"
                echo "$FOLDER_NAME" >> processed_folders/list.txt
                PROCESSED_COUNT=$((PROCESSED_COUNT + 1))
              else
                echo "   ‚ùå Error durante el procesamiento"
                cat /tmp/process_output.log || true
                FAILED_COUNT=$((FAILED_COUNT + 1))
              fi
            else
              echo "   ‚ùå ERROR: Archivo no encontrado en workspace: $file"
              echo "   Esto puede indicar que el archivo fue eliminado o renombrado"
              FAILED_COUNT=$((FAILED_COUNT + 1))
            fi
            echo ""
          done
          
          # Final summary
          echo "============================================================"
          echo "üìä RESUMEN DEL PROCESAMIENTO"
          echo "============================================================"
          echo "   Total archivos detectados: $FILE_COUNT"
          echo "   Procesados exitosamente: $PROCESSED_COUNT"
          echo "   Fallidos: $FAILED_COUNT"
          echo ""
          
          if [ -f processed_folders/list.txt ]; then
            echo "   Carpetas generadas:"
            cat processed_folders/list.txt | sed 's/^/      - /'
          fi
          echo "============================================================"

      - name: Copiar SOLO las subcarpetas procesadas a aplicaciones/DATE (idempotente)
        run: |
          echo "============================================================"
          echo "COPIANDO APLICACIONES PROCESADAS A CARPETA DE DESTINO"
          echo "============================================================"
          
          FECHA=$(date +%Y-%m-%d)
          mkdir -p "aplicaciones/$FECHA"
          
          echo "üìÖ Fecha de procesamiento: $FECHA"
          echo "üìÅ Carpeta destino: aplicaciones/$FECHA"
          echo ""
          
          if [ -f processed_folders/list.txt ]; then
            FOLDER_COUNT=$(wc -l < processed_folders/list.txt)
            echo "üìã Carpetas a copiar: $FOLDER_COUNT"
            echo "============================================================"
            
            COPY_SUCCESS=0
            COPY_FAILED=0
            
            while read -r FOLDER; do
              echo "üì¶ Procesando: $FOLDER"
              SRC="to_process_procesados/$FOLDER/"
              DEST="aplicaciones/$FECHA/$FOLDER/"
              
              if [ -d "$SRC" ]; then
                echo "   ‚úì Carpeta origen encontrada: $SRC"
                
                # List files to be copied
                echo "   üìÑ Archivos en origen:"
                ls -lh "$SRC" | tail -n +2 | awk '{print "      -", $9, "(" $5 ")"}'
                
                # Use rsync to copy/update contents idempotently
                if rsync -a --delete "$SRC" "$DEST"; then
                  echo "   ‚úÖ Copiado exitosamente a: $DEST"
                  COPY_SUCCESS=$((COPY_SUCCESS + 1))
                else
                  echo "   ‚ùå Error al copiar"
                  COPY_FAILED=$((COPY_FAILED + 1))
                fi
              else
                echo "   ‚ùå ERROR: Carpeta origen no encontrada: $SRC"
                COPY_FAILED=$((COPY_FAILED + 1))
              fi
              echo ""
            done < processed_folders/list.txt
            
            echo "============================================================"
            echo "üìä RESUMEN DE LA COPIA"
            echo "============================================================"
            echo "   Total carpetas: $FOLDER_COUNT"
            echo "   Copiadas exitosamente: $COPY_SUCCESS"
            echo "   Fallidas: $COPY_FAILED"
            echo "============================================================"
          else
            echo "‚ÑπÔ∏è  No se encontr√≥ lista de carpetas procesadas (processed_folders/list.txt)"
            echo "   Esto significa que no hubo archivos YAML procesados en este push."
            echo "   Acci√≥n: Salir sin copiar archivos."
            echo "============================================================"
          fi

      - name: Hacer commit de archivos generados
        run: |
          echo "============================================================"
          echo "COMMIT Y PUSH DE CAMBIOS"
          echo "============================================================"
          
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          echo "üìã Estado antes del commit:"
          git --no-pager status
          echo ""
          
          echo "üì¶ Agregando archivos al staging area..."
          git add aplicaciones/
          
          echo ""
          echo "üìã Archivos en staging area:"
          git --no-pager diff --cached --name-status | head -20
          echo ""
          
          if git diff --cached --quiet; then
            echo "‚ÑπÔ∏è  No hay cambios para hacer commit"
            echo "   Esto es normal si no se procesaron archivos o si no hubo cambios."
          else
            echo "‚úÖ Haciendo commit de cambios..."
            git commit -m "Add processed applications to /aplicaciones/ por fecha"
            
            echo ""
            echo "üöÄ Haciendo push al repositorio remoto..."
            git push
            
            echo ""
            echo "‚úÖ Cambios enviados exitosamente al repositorio"
          fi
          
          echo "============================================================"
